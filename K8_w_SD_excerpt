# motivations:
# to minimally gain experience scaling compute securely 
# so as not to leave idle or increase costs unnecessary 
# after use or downtime for self and users.
# setting up using Gu's article or other similar articles
# geared towards cloud orchestrating AI would 
# progress me towards hosting my own services for 
# OpenCollective media translation and collaboration 
# (website, whisper, mistral openWebUI)
# 
# additional benefits include
# 1) LoRA for training SD on personal images
# which can optionally help in Collective Expression project
# since optimally we want expressions to be trained on other platforms
# 2) we can try the open webUI version that will get us 1st steps for
# media learning, and then for our own cloud version (uses gradio instead of svelte)

# sources
# LoRA
# https://www.shruggingface.com/blog/self-portraits-with-stable-diffusion-and-lora
# https://www.linkedin.com/pulse/create-ai-model-your-face-have-fun-stable-diffusion-guillaume-lain%C3%A9
# https://arstechnica.com/gadgets/2023/03/making-faces-how-to-train-an-ai-on-your-face-to-create-silly-portraits/
# more at img gen mobile bookmarks


# checklist:
# 1) access aws cloud
# 2) check victor gu repo and source
# 3) spin up orchestration and stable diffusion 
# 4) refer to docs, cgpt n files to try different compute arch. exercises


# make sure:
# 1) to close or lower cloud compute n orchestration effectively
# after use to lower costs

# 2) access is secure yet scalable (ingress-nginx)

1/19/25 1130-1305

what i did:
  getting familar with vic gu's deployment by using the following aws cloudshell, terraform and helm links:
  # terraaform tutorial on basic concepts and next steps
  https://developer.hashicorp.com/terraform/tutorials/aws-get-started/aws-build
  # dl, ul, file into s3 bucket
  https://docs.aws.amazon.com/cloudshell/latest/userguide/getting-started.html#home-directory-backup
  https://registry.terraform.io/providers/hashicorp/aws/2.43.0/docs


for going through setting up git in aws cloudshell
  https://catalog.us-east-1.prod.workshops.aws/workshops/65a1d035-05db-4d86-9ca5-21d9dbca2b8d/en-US
and more labs like this, camps eg infrastructure.
  https://community.aws/students


unsure whether I need to install aws CLI if i'm using my laptop locally.

would prefer local to aws cloud shell because 
  1) i don't just want to deploy the orchestration
  2) i want to read, understand and comment on the codes in the respective/essential files
  3) I may need to modify param values to my requirements (eg amazon zone etc).
or
  1) I can link my github account to cloudshell
  2) I can use vim on aws cloudshell
  3) I can then edit and edit and commit to my own git account that can be reflected on cloudshell home dir.

next steps: 
  1) set up git in aws cloudshell
  2) further inspect, understand, comment why, how and where Vic Gu wrote his tf and find his sources.
  3) continue to spin up SD orchestration
  - review and make flashcards of important functions, concepts or repeatable processes.

1405

1730-1745
cloned vic gu's repo to hoohooprog

1830-1853
cloned repo from hoohooprog to cloudshell dir

1853-1930
tried to find more definitive guide on how the different parts of a tf file correspond to the needs of using
aws eks

-1945
opened some tabs in laptop, hoping for clearer instructions where n how to reference
tf files for k8s

day end review 1148
found some youtube videos like this 
https://www.youtube.com/watch?v=_BTpd2oYafM&t=1412s

that explains how to approach executing k8s with terraform
looking back, maybe it would've been more efficient if I had started with not just the official docs
but also how people actually write terraform for eks.

1345-1505 (1h20)
was searching for the list of params like these
  manage_default_network_acl    = false
  manage_default_route_table    = false
  manage_default_security_group = false
at the wrong places

did not find in eks and did not find in older version of vpc
did not check for version but it is in the latest ver. of vpc

-1525
while also try to find again as complete of vic gu's code origin, inspiration and expansion
by looking at doEKS, according to his explanation. 

I found the modules to be closer to his code, except maybe for syntax
ie 
  manage_default_network_acl = true
  default_network_acl_tags   = { Name = "${local.cluster_name}-default" }
in 
  https://github.com/awslabs/data-on-eks/blob/main/schedulers/terraform/aws-batch-eks/vpc.tf


anyways, would need to find best practices for eks terraform 
also
follow and notate v gu's code to understand the reasons behind his execution 
and how to perform them.
-1534

-1544
white papers for further reading 

on k8s security
https://docs.aws.amazon.com/eks/latest/best-practices/security.html#further-reading
https://aws.github.io/aws-eks-best-practices/security/docs/iam/
latest ver but no breakdown unlike above layout
https://docs.aws.amazon.com/eks/latest/best-practices/identity-and-access-management.html#_cluster_access_recommendations

list of other security topics
https://catalog.workshops.aws/eks-security-immersionday/en-US

best practices for codebase, backend, security
https://docs.aws.amazon.com/pdfs/prescriptive-guidance/latest/terraform-aws-provider-best-practices/terraform-aws-provider-best-practices.pdf

follow above section on "Understanding dependencies".. create file that expands tree on module's dependencies and nested modules and 
data sources, versioning
to be clear of what is used and what could be modified
1605 (2h 20min)

sat jan 25,2025
1200

want to know more on scaling n security. well simple said than what they encompass..
n then tweak the template from there.

may need to adjust my expectations n executions along the way.

sat jan 26, 2025
0116

spent some time getting back into terraform.
I decide maybe it would be easier to do everything via VPC console. Maybe there's even security too.
Because it's easier to touch ground on the knowledge of deploying without getting into terraform
which is an abstraction for variations on configs

Nevertheless, I can see I can spend some time to get back to terraform too by referring to 
terraform module source code, aws docs, terraform docs.. also as mentioned in CGPT.

For eg, to reference the source of module.vpc.private_route_table_ids, 
we can go to main.tf or output.tf of vpc module
https://registry.terraform.io/modules/terraform-aws-modules/vpc/aws/latest?tab=outputs
https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/main.tf

the unstructured module for complete can be found here:
https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/master/examples/complete/main.tf

-------

To reverse engineer vic's process or the template he's altering, 
we know the terraform is a reflection of the requirements for deployment on AWS console.
The console can show what's required and also provide information.

most important, I can read about the services he uses and even sketch out the deeper
technical arch. from what he implements and what he wrote.

It would be important to understand the fundamental concepts of what are being used

For eg, what are the uses of vpc endpoints and what variations are there? and how would I implement
them (for S3)? what conditions can be specified (for S3)?
https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html

https://docs.aws.amazon.com/vpc/latest/privatelink/create-interface-endpoint.html#create-interface-endpoint-aws
https://docs.aws.amazon.com/vpc/latest/privatelink/concepts.html
https://docs.aws.amazon.com/vpc/latest/privatelink/gateway-endpoints.html
https://docs.aws.amazon.com/AmazonECR/latest/userguide/vpc-endpoints.html

so why I need to use each var. in vpc endpt for Gu's article can be found here
https://github.com/terraform-aws-modules/terraform-aws-vpc/blob/v5.17.0/modules/vpc-endpoints/main.tf

more on such internal services provided by aws as a direct resource transfer privately via their network
called privatelink access
https://docs.aws.amazon.com/vpc/latest/privatelink/privatelink-access-aws-services.html

best practices for terraform aws
https://docs.aws.amazon.com/pdfs/prescriptive-guidance/latest/terraform-aws-provider-best-practices/terraform-aws-provider-best-practices.pdf

also, found a article that shows architecture diagramming very well, could complement RE vic gu's setup.

cgpt answer to resources n sources, which could be irrelevant since we conform to module source code n how to understand module
https://chatgpt.com/c/679559dc-aa14-8013-89ba-c4d60fa37d03























weds 29 Jan 2025
1322

Yesterday created another file called "cloud_iteration.py" that is for helping me to understand cloud deployment from 
a practical perspective, starting from running ec2 and adding vLLM and then downloading mistral to cloud dir
and then downloading more models, changing models to test.. before perhaps adding
an official API gateway for a public facing, personal UI (think OpenWebUI)
then load balancing, FastAPI on EKS for prod public scale.

also was curious about how vLLM gets the weights from HF and where in the code shows that. HF has good docs
on AI models.


